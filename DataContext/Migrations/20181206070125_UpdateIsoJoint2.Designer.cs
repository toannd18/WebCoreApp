// <auto-generated />
using System;
using DataContext.WebCoreApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataContext.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20181206070125_UpdateIsoJoint2")]
    partial class UpdateIsoJoint2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataContext.WebCoreApp.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("AppRole");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BrithDay")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MaBp")
                        .HasColumnName("Ma_BP")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MaCv")
                        .HasColumnName("Ma_CV")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MaTo")
                        .HasColumnName("Ma_TO")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .IsUnicode(false);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("MaBp");

                    b.HasIndex("MaCv");

                    b.HasIndex("MaTo");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Functions", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("IconCss")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ParentId")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Functions");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.LogIn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("IdName");

                    b.Property<string>("TblName")
                        .IsRequired()
                        .HasColumnName("tbl_Name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Log_in");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Permissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanCreate");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanRead");

                    b.Property<bool>("CanUpdate");

                    b.Property<string>("FunctionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.IsoJoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("DrawName")
                        .IsRequired();

                    b.Property<string>("Heate1")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Heate2");

                    b.Property<string>("Joint")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("Rev");

                    b.Property<string>("SF")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Status")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("TypeJoint")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserUpdated");

                    b.Property<string>("Welder1")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Welder2")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Welder3")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Welder4")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("WeldingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DrawName");

                    b.ToTable("IsoJoints");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.Isometric", b =>
                {
                    b.Property<string>("DrawName")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Line")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PipeClass")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<Guid>("Project");

                    b.Property<string>("Remark")
                        .HasMaxLength(255);

                    b.Property<string>("Rev")
                        .HasMaxLength(4);

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserUpdated");

                    b.HasKey("DrawName");

                    b.ToTable("Isometrics");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.MaterialPipe", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Name");

                    b.ToTable("MaterialPipes");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.TypeJoint", b =>
                {
                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Type");

                    b.ToTable("TypeJoints");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.Welder", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("BrithDay")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Remark")
                        .HasMaxLength(255);

                    b.Property<bool>("Status");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.ToTable("Welders");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.WelderCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CerDate")
                        .HasColumnType("Date");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("IdWelder");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .IsUnicode(true);

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserUpdated");

                    b.HasKey("Id");

                    b.HasIndex("IdWelder");

                    b.ToTable("WelderCertifications");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblBp", b =>
                {
                    b.Property<string>("MaBp")
                        .HasColumnName("Ma_BP")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TenBp")
                        .IsRequired()
                        .HasColumnName("Ten_BP")
                        .HasMaxLength(50);

                    b.HasKey("MaBp");

                    b.ToTable("tbl_BP");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblCv", b =>
                {
                    b.Property<string>("MaCv")
                        .HasColumnName("Ma_CV")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("Display");

                    b.Property<string>("TenCv")
                        .HasColumnName("Ten_CV")
                        .HasMaxLength(50);

                    b.HasKey("MaCv");

                    b.ToTable("tbl_CV");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment1")
                        .HasColumnType("ntext");

                    b.Property<string>("Comment2")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("StatusAutho1")
                        .HasColumnName("Status_Autho1");

                    b.Property<bool>("StatusAutho2")
                        .HasColumnName("Status_Autho2");

                    b.Property<bool>("StatusAutho3")
                        .HasColumnName("Status_Autho3");

                    b.Property<string>("TotalJob")
                        .HasColumnName("Total_Job")
                        .HasColumnType("ntext");

                    b.Property<string>("UserAutho1")
                        .HasColumnName("User_Autho1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserAutho2")
                        .HasColumnName("User_Autho2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserAutho3")
                        .HasColumnName("User_Autho3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbl_Daily");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDailyDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment1")
                        .HasColumnType("ntext");

                    b.Property<string>("Comment2")
                        .HasColumnType("ntext");

                    b.Property<string>("Comment3")
                        .HasColumnType("ntext");

                    b.Property<string>("ContentJob")
                        .IsRequired()
                        .HasColumnName("Content_Job")
                        .HasColumnType("ntext");

                    b.Property<int>("DailyId");

                    b.Property<TimeSpan>("FormTime");

                    b.Property<int>("JobId");

                    b.Property<int?>("Level1")
                        .HasColumnName("Level_1");

                    b.Property<int?>("Level2")
                        .HasColumnName("Level_2");

                    b.Property<int?>("Level3")
                        .HasColumnName("Level_3");

                    b.Property<string>("Method")
                        .HasColumnType("ntext");

                    b.Property<string>("Result")
                        .HasMaxLength(250);

                    b.Property<TimeSpan>("ToTime");

                    b.HasKey("Id");

                    b.HasIndex("DailyId");

                    b.ToTable("tbl_DailyDetail");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GhiChu")
                        .HasColumnName("Ghi_Chu")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Kieu");

                    b.Property<string>("Ma")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("NgayEval")
                        .HasColumnName("Ngay_Eval")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayExp")
                        .HasColumnName("Ngay_Exp")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayGui")
                        .HasColumnName("Ngay_Gui")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayHd")
                        .HasColumnName("Ngay_HD")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayKy")
                        .HasColumnName("Ngay_Ky")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayNt")
                        .HasColumnName("Ngay_NT")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayNtQc")
                        .HasColumnName("Ngay_NT_QC")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayPd")
                        .HasColumnName("Ngay_PD")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayPhd")
                        .HasColumnName("Ngay_PHD")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayTao")
                        .HasColumnName("Ngay_Tao")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayTh")
                        .HasColumnName("Ngay_TH")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NgayThtt")
                        .HasColumnName("Ngay_THTT")
                        .HasColumnType("datetime");

                    b.Property<bool>("Status");

                    b.Property<string>("TenDg")
                        .HasColumnName("Ten_Dg")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDg1")
                        .HasColumnName("Ten_Dg1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDg2")
                        .HasColumnName("Ten_Dg2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDg3")
                        .HasColumnName("Ten_Dg3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDg4")
                        .HasColumnName("Ten_Dg4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDx")
                        .HasColumnName("Ten_Dx")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDx1")
                        .HasColumnName("Ten_Dx1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDx2")
                        .HasColumnName("Ten_Dx2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDx3")
                        .HasColumnName("Ten_Dx3")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDx4")
                        .HasColumnName("Ten_Dx4")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TenDx5")
                        .HasColumnName("Ten_Dx5")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("TieuDe")
                        .HasColumnName("Tieu_De")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("tbl_DeXuat");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuatHd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("ChatLuong")
                        .HasColumnName("Chat_luong");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("DeXuatId");

                    b.Property<string>("Diem")
                        .IsUnicode(false);

                    b.Property<int>("GiaCa")
                        .HasColumnName("Gia_Ca");

                    b.Property<string>("MaNcc")
                        .IsRequired()
                        .HasColumnName("Ma_NCC")
                        .IsUnicode(false);

                    b.Property<int>("SoHd")
                        .HasColumnName("So_HD");

                    b.Property<int>("ThaiDo")
                        .HasColumnName("Thai_Do");

                    b.Property<int>("TienDo")
                        .HasColumnName("Tien_Do");

                    b.HasKey("Id");

                    b.HasIndex("DeXuatId");

                    b.ToTable("tbl_DeXuat_HD");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuatKt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeXuatId");

                    b.Property<string>("Dvt")
                        .HasColumnName("DVT");

                    b.Property<string>("GhiChu")
                        .HasColumnName("Ghi_Chu");

                    b.Property<string>("MoTa")
                        .HasColumnName("Mo_Ta");

                    b.Property<int>("SoLuong");

                    b.Property<string>("Ten");

                    b.HasKey("Id");

                    b.HasIndex("DeXuatId");

                    b.ToTable("tbl_DeXuat_KT");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuatTm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bh")
                        .HasColumnName("BH");

                    b.Property<string>("CheDo")
                        .HasColumnName("Che_Do");

                    b.Property<int>("DeXuatId");

                    b.Property<string>("DiaDiem")
                        .HasColumnName("Dia_Diem");

                    b.Property<string>("DieuKien")
                        .HasColumnName("Dieu_Kien");

                    b.Property<string>("GhiChu")
                        .HasColumnName("Ghi_Chu");

                    b.Property<string>("HieuLuc")
                        .HasColumnName("Hieu_Luc");

                    b.Property<string>("LoaiTien")
                        .HasColumnName("Loai_Tien")
                        .IsUnicode(false);

                    b.Property<string>("ThoiGian")
                        .HasColumnName("Thoi_Gian");

                    b.HasKey("Id");

                    b.HasIndex("DeXuatId");

                    b.ToTable("tbl_DeXuat_TM");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDgKt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeXuatId");

                    b.Property<bool>("Dg")
                        .HasColumnName("DG");

                    b.Property<int>("DgKtId")
                        .HasColumnName("DG_KT_Id");

                    b.Property<int>("DgNccId")
                        .HasColumnName("DG_NCC_Id");

                    b.Property<int?>("DonGia")
                        .HasColumnName("Don_Gia");

                    b.Property<string>("GhiChu")
                        .HasColumnName("Ghi_Chu");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnName("Mo_Ta");

                    b.Property<string>("Ten")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DeXuatId");

                    b.ToTable("tbl_DG_KT");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDgNcc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeXuatId");

                    b.Property<int?>("Dg")
                        .HasColumnName("DG");

                    b.Property<bool?>("DgKt")
                        .HasColumnName("DG_KT");

                    b.Property<int?>("DgTm")
                        .HasColumnName("DG_TM");

                    b.Property<string>("MaNcc")
                        .HasColumnName("Ma_NCC")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DeXuatId");

                    b.HasIndex("MaNcc");

                    b.ToTable("tbl_DG_NCC");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDgTm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bh")
                        .HasColumnName("BH");

                    b.Property<string>("CheDo")
                        .HasColumnName("Che_Do");

                    b.Property<int>("DeXuatId");

                    b.Property<int>("DgNccId")
                        .HasColumnName("DG_NCC_Id");

                    b.Property<string>("DiaDiem")
                        .HasColumnName("Dia_Diem");

                    b.Property<string>("DieuKien")
                        .HasColumnName("Dieu_Kien");

                    b.Property<string>("GhiChu")
                        .HasColumnName("Ghi_Chu");

                    b.Property<string>("HieuLuc")
                        .HasColumnName("Hieu_Luc");

                    b.Property<string>("ThoiGian")
                        .HasColumnName("Thoi_Gian");

                    b.Property<bool?>("VanChuyen")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Van_Chuyen")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("DeXuatId");

                    b.ToTable("tbl_DG_TM");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaBp")
                        .IsRequired()
                        .HasColumnName("Ma_BP")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MaTo")
                        .HasColumnName("Ma_TO")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TenJob")
                        .IsRequired()
                        .HasColumnName("Ten_Job")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("MaBp");

                    b.ToTable("tbl_Job");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblListCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Co")
                        .HasColumnName("CO");

                    b.Property<bool?>("Cq")
                        .HasColumnName("CQ");

                    b.Property<DateTime?>("DateEdit")
                        .HasColumnName("Date_Edit")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateNhap")
                        .HasColumnName("Date_Nhap")
                        .HasColumnType("date");

                    b.Property<string>("DonVi")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("MaNcc")
                        .IsRequired()
                        .HasColumnName("Ma_NCC")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MaTb")
                        .IsRequired()
                        .HasColumnName("Ma_TB")
                        .HasMaxLength(50);

                    b.Property<bool?>("Mtr")
                        .HasColumnName("MTR");

                    b.Property<string>("NoteOther")
                        .HasColumnName("Note_Other")
                        .HasMaxLength(200);

                    b.Property<bool?>("Other");

                    b.Property<bool?>("Pn")
                        .HasColumnName("PN");

                    b.Property<string>("Reason");

                    b.Property<int>("RequestId");

                    b.Property<bool?>("Result");

                    b.Property<bool?>("Sn")
                        .HasColumnName("SN");

                    b.Property<string>("TtKt")
                        .HasColumnName("TT_KT");

                    b.Property<int>("TtSl")
                        .HasColumnName("TT_SL");

                    b.Property<string>("UserEdit")
                        .HasColumnName("User_Edit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserNhap")
                        .HasColumnName("User_Nhap")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("YcKt")
                        .HasColumnName("YC_KT");

                    b.Property<int>("YcSl")
                        .HasColumnName("YC_SL");

                    b.HasKey("Id");

                    b.ToTable("tbl_List_Check");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblListRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Co")
                        .HasColumnName("CO");

                    b.Property<bool>("Cq")
                        .HasColumnName("CQ");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateAutho")
                        .HasColumnName("Date_Autho")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEdit")
                        .HasColumnName("Date_Edit")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateNhap")
                        .HasColumnName("Date_Nhap")
                        .HasColumnType("date");

                    b.Property<string>("DeXuat")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DiaDiem")
                        .HasColumnName("Dia_Diem")
                        .HasMaxLength(70);

                    b.Property<int>("FirstId");

                    b.Property<string>("HangMuc")
                        .HasColumnName("Hang_Muc")
                        .HasMaxLength(50);

                    b.Property<string>("HopDong")
                        .HasMaxLength(50);

                    b.Property<string>("LateId")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.Property<string>("MaBp")
                        .IsRequired()
                        .HasColumnName("Ma_BP")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasMaxLength(50);

                    b.Property<string>("NoteAutho")
                        .HasColumnName("Note_Autho")
                        .HasMaxLength(50);

                    b.Property<bool>("Other");

                    b.Property<string>("StatusAutho")
                        .HasColumnName("Status_Autho")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("UserAutho")
                        .HasColumnName("User_Autho")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserEdit")
                        .HasColumnName("User_Edit")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserNhap")
                        .IsRequired()
                        .HasColumnName("User_Nhap")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbl_List_Request");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblNcc", b =>
                {
                    b.Property<string>("MaNcc")
                        .HasColumnName("Ma_NCC")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Attn")
                        .HasMaxLength(50);

                    b.Property<string>("DiaChi")
                        .HasColumnName("Dia_Chi")
                        .HasMaxLength(100);

                    b.Property<string>("DichVu")
                        .HasColumnName("Dich_Vu");

                    b.Property<string>("Diem")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("HangHoa")
                        .HasColumnName("Hang_Hoa");

                    b.Property<string>("Tel")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("TenNcc")
                        .IsRequired()
                        .HasColumnName("Ten_NCC")
                        .HasMaxLength(100);

                    b.Property<int?>("Time");

                    b.HasKey("MaNcc");

                    b.ToTable("tbl_NCC");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblNotifications", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Notification")
                        .HasMaxLength(100);

                    b.Property<string>("ReceiveId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SendId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Status");

                    b.Property<string>("Url")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbl_Notifications");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Attn")
                        .HasMaxLength(20);

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("tbl_Provider");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblTo", b =>
                {
                    b.Property<string>("MaTo")
                        .HasColumnName("Ma_TO")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MaBp")
                        .IsRequired()
                        .HasColumnName("Ma_BP")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TenTo")
                        .HasColumnName("Ten_TO")
                        .HasMaxLength(50);

                    b.HasKey("MaTo");

                    b.HasIndex("MaBp");

                    b.ToTable("tbl_TO");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.AppUser", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblBp", "TblBp")
                        .WithMany("AppUser")
                        .HasForeignKey("MaBp")
                        .HasConstraintName("FK_AppUser_TblBp");

                    b.HasOne("DataContext.WebCoreApp.TblCv", "TblCv")
                        .WithMany("AppUser")
                        .HasForeignKey("MaCv")
                        .HasConstraintName("FK_AppUser_TblCv");

                    b.HasOne("DataContext.WebCoreApp.TblTo", "TblTo")
                        .WithMany("AppUser")
                        .HasForeignKey("MaTo")
                        .HasConstraintName("FK_AppUser_TblTo");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Functions", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.Functions", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Functions_Functions");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Permissions", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.Functions", "Function")
                        .WithMany("Permissions")
                        .HasForeignKey("FunctionId")
                        .HasConstraintName("FK_Permissions_Functions");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.IsoJoint", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.Pipe.Isometric", "Isometric")
                        .WithMany("IsoJoints")
                        .HasForeignKey("DrawName")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataContext.WebCoreApp.Pipe.WelderCertification", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.Pipe.Welder", "Welder")
                        .WithMany("WelderCertifications")
                        .HasForeignKey("IdWelder");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDailyDetail", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDaily", "Daily")
                        .WithMany("TblDailyDetail")
                        .HasForeignKey("DailyId")
                        .HasConstraintName("FK_tbl_DailyDetail_tbl_Daily");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuatHd", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDeXuat", "DeXuat")
                        .WithMany("TblDeXuatHd")
                        .HasForeignKey("DeXuatId")
                        .HasConstraintName("FK_tbl_DeXuat_HD_tbl_DeXuat");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuatKt", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDeXuat", "DeXuat")
                        .WithMany("TblDeXuatKt")
                        .HasForeignKey("DeXuatId")
                        .HasConstraintName("FK_tbl_DeXuat_KT_tbl_DeXuat");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDeXuatTm", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDeXuat", "DeXuat")
                        .WithMany("TblDeXuatTm")
                        .HasForeignKey("DeXuatId")
                        .HasConstraintName("FK_tbl_DeXuat_TM_tbl_DeXuat");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDgKt", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDeXuat", "DeXuat")
                        .WithMany("TblDgKt")
                        .HasForeignKey("DeXuatId")
                        .HasConstraintName("FK_tbl_DG_KT_tbl_DeXuat");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDgNcc", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDeXuat", "DeXuat")
                        .WithMany("TblDgNcc")
                        .HasForeignKey("DeXuatId")
                        .HasConstraintName("FK_tbl_DG_NCC_tbl_DeXuat");

                    b.HasOne("DataContext.WebCoreApp.TblNcc", "MaNccNavigation")
                        .WithMany("TblDgNcc")
                        .HasForeignKey("MaNcc")
                        .HasConstraintName("FK_tbl_DG_NCC_tbl_NCC");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblDgTm", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblDeXuat", "DeXuat")
                        .WithMany("TblDgTm")
                        .HasForeignKey("DeXuatId")
                        .HasConstraintName("FK_tbl_DG_TM_tbl_DeXuat");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblJob", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblBp", "MaBpNavigation")
                        .WithMany("TblJob")
                        .HasForeignKey("MaBp")
                        .HasConstraintName("FK_tbl_Job_tbl_BP");
                });

            modelBuilder.Entity("DataContext.WebCoreApp.TblTo", b =>
                {
                    b.HasOne("DataContext.WebCoreApp.TblBp", "MaBpNavigation")
                        .WithMany("TblTo")
                        .HasForeignKey("MaBp")
                        .HasConstraintName("FK_tbl_TO_tbl_BP");
                });
#pragma warning restore 612, 618
        }
    }
}
